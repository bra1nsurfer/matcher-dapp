{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let SEP = "__"
let CONTRACT_NAME = "matcher-spot.ride"
let WAVES = "WAVES"

func wrapErr(s: String) = {
  CONTRACT_NAME + ": " + s
}

func throwErr(s: String) = {
  throw(wrapErr(s))
}

func assetIdToString(assetId: ByteVector|Unit) = {
  match assetId {
    case b: ByteVector => b.toBase58String()
    case _: Unit => WAVES
  }
}

func stringToAssetId(s: String) = {
  if (s == WAVES) then unit else s.fromBase58String()
}

let kFactoryAddress      = ["%s", "factoryAddress"].makeString(SEP)
let factoryAddressString = this.getString(kFactoryAddress).valueOrErrorMessage("factory address is not set")
let factoryAddress       = factoryAddressString.addressFromString().valueOrErrorMessage("invalid factory address")

let kForceStop = ["%s", "forceStop"].makeString(SEP)
let forceStop  = factoryAddress.getBoolean(kForceStop).valueOrElse(false)

let kValidatorAddress = ["%s", "validatorAddress"].makeString(SEP)
let validatorAddress  = factoryAddress.getString(kValidatorAddress).valueOrElse("")
let kTreasuryAddress  = ["%s", "treasuryAddress"].makeString(SEP)
let treasuryAddress   = factoryAddress.getString(kTreasuryAddress).valueOrElse("")

@Callable(i)
func init(matcherFactory: String) = {
  strict check = [
    i.caller == this || throwErr("permission denied")
  ]

  [StringEntry(kFactoryAddress, matcherFactory)]
}

@Callable(i)
func exchange(
  buyerAddress : String,
  buyerFeeType : String,
  sellerAddress: String,
  sellerFeeType: String,
  asset1Amount : Int,
  asset1Id     : String,
  asset2Amount : Int,
  asset2Id     : String,
  buyerFlag    : ByteVector,
  sellerFlag   : ByteVector
  ) = {
  strict check = [
    !forceStop || throwErr("contract is temporary stopped"),
    i.caller.toString() == validatorAddress || throwErr("permission denied"),
    buyerAddress != sellerAddress || throwErr("buyer and seller is the same")
  ]

  (
    [],
    [
      # Swap amountAsset (seller -> buyer)
      treasuryAddress.addressFromStringValue().invoke("subBalance", [sellerAddress, asset1Id, asset1Amount], []),
      treasuryAddress.addressFromStringValue().invoke("addBalance", [buyerAddress, asset1Id, asset1Amount], []),

      # Swap priceAsset (buyer -> seller)
      treasuryAddress.addressFromStringValue().invoke("subBalance", [buyerAddress, asset2Id, asset2Amount], []),
      treasuryAddress.addressFromStringValue().invoke("addBalance", [sellerAddress, asset2Id, asset2Amount], [])
    ]
  )
}