{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let SEP = "__"
let CONTRACT_NAME = "matcher-factory.ride"

func wrapErr(s: String) = {
  CONTRACT_NAME + ": " + s
}

func throwErr(s: String) = {
  throw(wrapErr(s))
}

let kForceStop        = ["%s", "forceStop"].makeString(SEP)
let kMatcherValidator = ["%s", "matcherValidator"].makeString(SEP)
let kMatcherPublicKey = ["%s", "matcherPublicKey"].makeString(SEP)
let kSpotContract     = ["%s", "spotContract"].makeString(SEP)
let kTreasuryAddress  = ["%s", "treasuryContract"].makeString(SEP)
let kPoolAddress      = ["%s", "poolAddress"].makeString(SEP)

let kAllowedAssets = ["%s", "allowedAssets"].makeString(SEP)
let allowedAssets  = match (this.getString(kAllowedAssets)) {
    case s:String => s.split_4C(SEP)
    case _ => []
  }

let contractsList = [
    this.getString(kSpotContract).valueOrElse(""), # spot
    "",                                            # leverage
    ""                                             # margin
  ]

@Callable(i)
func init(
    matcherValidator: String,
    matcherPublicKey: String,
    spotContract    : String,
    treasuryContract: String,
    poolContract    : String
  ) = {
  strict check = [
    i.caller == this || throwErr("permission denied")
  ]

  let validator = if (matcherValidator == "") then [] else [StringEntry(kMatcherValidator, matcherValidator)]
  let pubKey    = if (matcherPublicKey == "") then [] else [StringEntry(kMatcherPublicKey, matcherPublicKey)]
  let spot      = if (spotContract     == "") then [] else [StringEntry(kSpotContract, spotContract)]
  let treasury  = if (treasuryContract == "") then [] else [StringEntry(kTreasuryAddress, treasuryContract)]
  let pool      = if (poolContract     == "") then [] else [StringEntry(kPoolAddress, poolContract)]

  validator ++ pubKey ++ spot ++ treasury ++ pool
}

@Callable(i)
func forceStop(value: Boolean) = {
  strict check = [
    i.caller == this || throwErr("permission denied")
  ]
    
  [ BooleanEntry(kForceStop, value) ]
}

@Callable(i)
func getOrderTypeContract(orderType: Int) = {
  ([], contractsList[orderType])
}

@Callable(i)
func getAllOrderTypeContracts() = {
  ([], contractsList)
}

@Callable(i)
func addAllowedAsset(assetId: String) = {
  strict check = [
    i.caller == this || throwErr("permission denied")
  ]

  let newAllowedList = allowedAssets :+ assetId

  [
    StringEntry(kAllowedAssets, newAllowedList.makeString(SEP))
  ]
}

@Callable(i)
func removeAllowedAsset(assetId: String) = {
  strict check = [
    i.caller == this || throwErr("permission denied")
  ]

  match (allowedAssets.indexOf(assetId)) {
      case index:Int => {
        let newAllowedList = allowedAssets.removeByIndex(index)
        if (newAllowedList.size() > 0) 
          then [StringEntry(kAllowedAssets, newAllowedList.makeString(SEP))]
          else [DeleteEntry(kAllowedAssets)]
      }
      case _ => throw("asset is not found")
    }
}