{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let SEP = "__"
let CONTRACT_NAME = "matcher-treasury.ride"
let WAVES = "WAVES"
let DEC8 = 1_0000_0000

func wrapErr(s: String) = {
  CONTRACT_NAME + ": " + s
}

func throwErr(s: String) = {
  throw(wrapErr(s))
}

func assetIdToString(assetId: ByteVector|Unit) = {
  match assetId {
    case b: ByteVector => b.toBase58String()
    case _: Unit => WAVES
  }
}

func stringToAssetId(s: String) = {
  if (s == WAVES) then unit else s.fromBase58String()
}

let kFactoryAddress      = ["%s", "factoryAddress"].makeString(SEP)
let factoryAddressString = this.getString(kFactoryAddress).valueOrErrorMessage("factory address is not set")
let factoryAddress       = factoryAddressString.addressFromString().valueOrErrorMessage("invalid factory address")

let kForceStop = ["%s", "forceStop"].makeString(SEP)
let forceStop  = factoryAddress.getBoolean(kForceStop).valueOrElse(false)

let kValidatorAddress = ["%s", "validatorAddress"].makeString(SEP)
let validatorAddress  = factoryAddress.getString(kValidatorAddress).valueOrElse("")

let kPoolAddress = ["%s", "poolAddress"].makeString(SEP)
let poolAddress  = factoryAddress.getString(kPoolAddress).valueOrElse("")

func kUserBalance(user: String, assetId: String) = ["%s%s%s", "balance", user, assetId].makeString(SEP)
func getUserBalance(user: String, assetId: String) = this.getInteger(kUserBalance(user, assetId)).valueOrElse(0)

func kUserLoan(user: String, assetId: String) = ["%s%s%s", "loan", user, assetId].makeString(SEP)
func getUserLoan(user: String, assetId: String) = this.getInteger(kUserLoan(user, assetId)).valueOrElse(0)

let kAllowedAssets = ["%s", "allowedAssets"].makeString(SEP)
let allowedAssets  = match (factoryAddress.getString(kAllowedAssets)) {
    case s:String => s.split_4C(SEP)
    case _ => []
}

# TODO: decide which way is better
# let kSpotAddress     = ["%s", "spotAddress"].makeString(SEP)
# let kLeverageAddress = ["%s", "leverageAddress"].makeString(SEP)

# let orderContractList = [
#     factoryAddress.getString(kSpotAddress).valueOrElse(""),     # spot
#     factoryAddress.getString(kLeverageAddress).valueOrElse(""), # leverage
#     ""                                                          # margin
# ]

let orderContractList = {
  let addressStringList = factoryAddress.invoke("getAllOrderTypeContracts", [], [])
  
  match (addressStringList) {
      case s:List[Any] => s
      case _ => []
    }
}

func isUserWithDebt(user: String) = {
  func sumDebt(acc: Int, nextAsset: String) = (acc + getUserLoan(user, nextAsset))
  let debt = FOLD<10>(allowedAssets, 0, sumDebt)

  (debt > 0)
}

func changeBalanceHelper(user: String, assetId: String, amount: Int, add: Boolean) = {
  let oldBalance = getUserBalance(user, assetId)
  let newBalance = if add then oldBalance + amount else oldBalance - amount

  strict check = [
    !forceStop || throwErr("contract is temporary stopped"),
    allowedAssets.containsElement(assetId) || throwErr("asset is not allowed"),
    amount > 0 || throwErr("amount must be greater than 0"),
    newBalance >= 0 || throwErr(["not enough balance", user].makeString(" "))
  ]

  [
    IntegerEntry(kUserBalance(user, assetId), newBalance)
  ]
}

func changeLoanHelper(user: String, assetId: String, amount: Int, add: Boolean) = {
  let oldLoan = getUserLoan(user, assetId)
  let newRawLoan = if add then oldLoan + amount else oldLoan - amount
  let newLoan = max([0, newRawLoan])

  strict check = [
    !forceStop || throwErr("contract is temporary stopped"),
    allowedAssets.containsElement(assetId) || throwErr("asset is not allowed"),
    amount > 0 || throwErr("amount must be greater than 0")
  ]

  [
    IntegerEntry(kUserLoan(user, assetId), newLoan)
  ]
}

func getAllUserInfo(user: String) = {
  func helper(acc: List[(String, Int, Int)], nextAsset: String) = {
    let balance = getUserBalance(user, nextAsset)
    let loan = getUserLoan(user, nextAsset)

    acc :+ (nextAsset, balance, loan)
  }

  let info = FOLD<10>(allowedAssets, [], helper)

  info
}

func loanPaymentHelper(user: String, assetId: String, amount: Int) = {
  let pool = poolAddress.addressFromStringValue()
  let userBalance = getUserBalance(user, assetId)

  strict checks = [
    amount <= userBalance || throwErr("not enough balance")
  ]

  strict inv = [
    pool.invoke("loanPayment", [user], [AttachedPayment(assetId.stringToAssetId(), amount)])
  ]

  let balanceActions = changeBalanceHelper(user, assetId, amount, false)
  let loanActions = changeLoanHelper(user, assetId, amount, false)

  balanceActions ++ loanActions
}

@Callable(i)
func init(matcherFactory: String) = {
  strict check = [
    i.caller == this || throwErr("permission denied")
  ]

  [StringEntry(kFactoryAddress, matcherFactory)]
}

@Callable(i)
func deposit() = {
  let userAddress = i.caller.toString()

  strict check = [
    !forceStop || throwErr("contract is temporary stopped")
  ]

  func a(actionsList: List[IntegerEntry], nextPayment: AttachedPayment) = {
    let assetId = nextPayment.assetId.assetIdToString()
    let kCurAsset = kUserBalance(userAddress, assetId)
    let curBalance = this.getInteger(kCurAsset).valueOrElse(0)

    if (allowedAssets.containsElement(assetId)) 
      then actionsList ++ [IntegerEntry(kCurAsset, curBalance + nextPayment.amount)]
      else throwErr("asset not in the allowed list")
  }

  let allActions = FOLD<10>(i.payments, [], a)

  allActions
}

@Callable(i) 
func withdraw(assetId: String, amount: Int) = {
  let user = i.caller.toString()
  let kBalance = kUserBalance(user, assetId)
  let balance = this.getInteger(kBalance).valueOrElse(0)
  let newBalance = balance - amount

  strict check = [
    !forceStop || throwErr("contract is temporary stopped"),
    amount > 0 || throwErr("amount must be greater than 0"),
    newBalance >= 0 || throwErr(["not enough balance to withdraw", user].makeString(" ")),
    !isUserWithDebt(user) || throwErr("cannot withdraw with debt")
  ]

  [
    ScriptTransfer(i.caller, amount, assetId.stringToAssetId()),
    IntegerEntry(kBalance, newBalance)
  ]
}

@Callable(i)
func subBalance(user: String, assetId: String, amount: Int) = {
  strict check = [
      orderContractList.containsElement(i.caller.toString()) || throwErr("permission denied")
  ]
  changeBalanceHelper(user, assetId, amount, false)
}

@Callable(i)
func addBalance(user: String, assetId: String, amount: Int) = {
  strict check = [
      orderContractList.containsElement(i.caller.toString()) || throwErr("permission denied")
  ]
  changeBalanceHelper(user, assetId, amount, true)
}

@Callable(i)
func loanBorrow(assetId: String, amount: Int) = {
  let pool = poolAddress.addressFromStringValue()
  let user = i.caller.toString()
  strict inv = [
    pool.invoke("loanBorrow", [user, assetId, amount], [])
  ]

  # 0.05 from amount (5%)
  let interest = fraction(amount, 500_0000, DEC8)

  let balanceActions = changeBalanceHelper(user, assetId, amount, true)
  let loanActions = changeLoanHelper(user, assetId, amount+interest, true)

  balanceActions ++ loanActions
}

@Callable(i)
func loanPayment(assetId: String, amount: Int) = {
  let user = i.caller.toString()

  loanPaymentHelper(user, assetId, amount)
}

@Callable(i)
func loanPaymentFor(user: String, assetId: String, amount: Int) = {
  strict check = [
      orderContractList.containsElement(i.caller.toString()) || throwErr("permission denied")
  ]

  loanPaymentHelper(user, assetId, amount)
}