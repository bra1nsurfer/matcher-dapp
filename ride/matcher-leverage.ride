{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let SEP = "__"
let CONTRACT_NAME = "matcher-leverage.ride"
let WAVES = "WAVES"

func wrapErr(s: String) = {
  CONTRACT_NAME + ": " + s
}

func throwErr(s: String) = {
  throw(wrapErr(s))
}

func assetIdToString(assetId: ByteVector|Unit) = {
  match assetId {
    case b: ByteVector => b.toBase58String()
    case _: Unit => WAVES
  }
}

func stringToAssetId(s: String) = {
  if (s == WAVES) then unit else s.fromBase58String()
}

let kFactoryAddress      = ["%s", "factoryAddress"].makeString(SEP)
let factoryAddressString = this.getString(kFactoryAddress).valueOrErrorMessage("factory address is not set")
let factoryAddress       = factoryAddressString.addressFromString().valueOrErrorMessage("invalid factory address")

let kForceStop = ["%s", "forceStop"].makeString(SEP)
let forceStop  = factoryAddress.getBoolean(kForceStop).valueOrElse(false)

let kValidatorAddress = ["%s", "validatorAddress"].makeString(SEP)
let validatorAddress  = factoryAddress.getString(kValidatorAddress).valueOrElse("")
let kTreasuryAddress  = ["%s", "treasuryAddress"].makeString(SEP)
let sTreasuryAddress  = factoryAddress.getString(kTreasuryAddress).valueOrElse("")
let treasuryAddress   = sTreasuryAddress.addressFromStringValue()

let kMatcherPublicKey = ["%s", "matcherPublicKey"].makeString(SEP)
let matcherPublicKey  = factoryAddress.getString(kMatcherPublicKey).valueOrElse("").fromBase58String()
let matcherAddress    = matcherPublicKey.addressFromPublicKey()
let sMatcherAddress   = matcherAddress.toString()

func kUserBalance(user: String, assetId: String) = ["%s%s%s", "balance", user, assetId].makeString(SEP)
func getUserBalance(user: String, assetId: String) = treasuryAddress.getInteger(kUserBalance(user, assetId)).valueOrElse(0)

func kUserLoan(user: String, assetId: String) = ["%s%s%s", "loan", user, assetId].makeString(SEP)
func getUserLoan(user: String, assetId: String) = treasuryAddress.getInteger(kUserLoan(user, assetId)).valueOrElse(0)

func kUserLeverage(user: String) = ["%s%s", "leverage", user].makeString(SEP)
func getUserLeverage(user: String) = factoryAddress.getInteger(kUserLeverage(user)).valueOrElse(1)

func padBytes(x: ByteVector) = {
  let a = 0.toBytes()
  a + a.drop(x.size()) + x
}

func bytesToInt(x: ByteVector) = {
  x.padBytes().toBigInt().toInt()
}

func parseOrderFlags(flags: ByteVector) = {
  let loanPaymentFlag = flags.takeRight(1).bytesToInt()
  let isLoanPayment = (loanPaymentFlag == 1)

  (isLoanPayment)
}

func calcUserAmountFromLeverage(totalAmount: Int, leverage: Int) = {
  if (leverage <= 1) 
    then totalAmount
    else fraction(totalAmount, 1, leverage)
}

func calcLoanAmountFromLeverage(totalAmount: Int, leverage: Int) = {
  totalAmount - calcUserAmountFromLeverage(totalAmount, leverage)
}

@Callable(i)
func init(matcherFactory: String) = {
  strict check = [
    i.caller == this || throwErr("permission denied")
  ]

  [StringEntry(kFactoryAddress, matcherFactory)]
}

@Callable(i)
func exchange(
  buyerAddress  : String,
  buyerFeeType  : String,
  buyerFeeAsset : String,
  buyerFee      : Int,
  sellerAddress : String,
  sellerFeeType : String,
  sellerFeeAsset: String,
  sellerFee     : Int,
  asset1Amount  : Int,
  asset1Id      : String,
  asset2Amount  : Int,
  asset2Id      : String,
  buyerFlags    : ByteVector,
  sellerFlags   : ByteVector
  ) = {
  strict check = [
    !forceStop || throwErr("contract is temporary stopped"),
    i.caller.toString() == validatorAddress || throwErr("permission denied"),
    buyerAddress != sellerAddress || throwErr("buyer and seller is the same")
  ]

  # Buyer actions
  # gives asset2
  # takes asset1
  # can borrow asset2
  # can repay asset1
  let (isBuyerLoanPayment, buyerLeverage) = (parseOrderFlags(buyerFlags), getUserLeverage(buyerAddress))
  let buyerNewLoanAmount = calcLoanAmountFromLeverage(asset2Amount, buyerLeverage)
  let buyerLoanBorrowAction = if (buyerNewLoanAmount > 0) 
    then [ treasuryAddress.invoke("loanBorrowFor", [buyerAddress, asset2Id, buyerNewLoanAmount], []) ]
    else []

  let buyerAsset1Loan      = getUserLoan(buyerAddress, asset1Id)
  let buyerLoanCover       = min([asset1Amount, buyerAsset1Loan])
  let buyerLoanPaymentAction = if (isBuyerLoanPayment && buyerLoanCover > 0)
    then [ treasuryAddress.invoke("loanPaymentFor", [buyerAddress, asset1Id, buyerLoanCover], []) ]
    else []

  # Seller actions
  # gives asset1
  # takes asset2
  # can borrow asset1
  # can repay asset2
  let (isSellerLoanPayment, sellerLeverage) = (parseOrderFlags(sellerFlags), getUserLeverage(sellerAddress))
  let sellerNewLoanAmount = calcLoanAmountFromLeverage(asset1Amount, sellerLeverage)
  let sellerLoanBorrowAction = if (sellerNewLoanAmount > 0) 
    then [ treasuryAddress.invoke("loanBorrowFor", [sellerAddress, asset1Id, sellerNewLoanAmount], []) ]
    else []

  let sellerAsset2Loan      = getUserLoan(sellerAddress, asset2Id)
  let sellerLoanCover       = min([asset2Amount, sellerAsset2Loan])
  let sellerLoanPaymentAction = if (isSellerLoanPayment && sellerLoanCover > 0)
    then [ treasuryAddress.invoke("loanPaymentFor", [sellerAddress, asset2Id, sellerLoanCover], []) ]
    else []

  # Exchange actions
  let swapActions = [
      # Swap amountAsset (seller -> buyer)
      treasuryAddress.invoke("subBalance", [sellerAddress, asset1Id, asset1Amount], []),
      treasuryAddress.invoke("addBalance", [buyerAddress, asset1Id, asset1Amount], []),

      # Swap priceAsset (buyer -> seller)
      treasuryAddress.invoke("subBalance", [buyerAddress, asset2Id, asset2Amount], []),
      treasuryAddress.invoke("addBalance", [sellerAddress, asset2Id, asset2Amount], []),

      # Transfer fee to Matcher
      treasuryAddress.invoke("subBalance", [sellerAddress, sellerFeeAsset, sellerFee], []),
      treasuryAddress.invoke("transferTo", [sMatcherAddress, sellerFeeAsset, sellerFee], []),
      treasuryAddress.invoke("subBalance", [buyerAddress, buyerFeeAsset, buyerFee], []),
      treasuryAddress.invoke("transferTo", [sMatcherAddress, buyerFeeAsset, buyerFee], [])
    ]

  # Actions order is important!
  (
    [],
    buyerLoanBorrowAction ++
    sellerLoanBorrowAction ++
    swapActions ++
    buyerLoanPaymentAction ++
    sellerLoanPaymentAction
  )
}